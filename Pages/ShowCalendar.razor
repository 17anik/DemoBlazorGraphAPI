@page "/showcalendar"

@using DemoBlazorGraphAPI.Graph;
@using Microsoft.Identity.Web
@using Microsoft.Graph

@inject GraphCalendarClient calenderClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler consenthandler

<h1>Calendar Events</h1>

<p>This component demonstrates fetching calendar events using Graph API.</p>


@if (Events == null)
{
    <p><em>Loading...</em></p>
}
else
{

    @foreach (var evt in Events)
    {
        <div class="card" style="width: 50rem;">
            <div class="card-body">
                <h5 class="card-title">
                    @evt.Subject
                </h5>
                <p class="card-text">
                    <div class="container">
                        <div class="row">
                            <div class="col-2">
                                <strong>Start:</strong>
                            </div>
                            <div class="col">
                                @FormatDateTimeTimeZone(evt.Start)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2">
                                <strong>End:</strong>
                            </div>
                            <div class="col">
                                @FormatDateTimeTimeZone(evt.End)
                            </div>
                        </div>
                    </div>
                </p>
            </div>
        </div>
        <br />
    }

}

@code {

    private MailboxSettings? MailboxSettings { get; set; }

    public IEnumerable<Event> Events { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            MailboxSettings = await calenderClient.GetUserMailboxSettings();
            var userTimeZone = (String.IsNullOrEmpty(MailboxSettings.TimeZone))
                                ? "Pacific Standard Time" : MailboxSettings.TimeZone;
            Events = await calenderClient.GetEvents(userTimeZone);
        }
        catch (Exception ex)
        {
            consenthandler.HandleException(ex);
        }
    }

    public string FormatDateTimeTimeZone(DateTimeTimeZone value)
    {
        // Parse the date/time string from Graph into a DateTime
        var graphDatetime = value.DateTime;
        if (DateTime.TryParse(graphDatetime, out DateTime dateTime))
        {
            var dateTimeFormat = $"{MailboxSettings.DateFormat} {MailboxSettings.TimeFormat}".Trim();
            if (!String.IsNullOrEmpty(dateTimeFormat))
            {
                return dateTime.ToString(dateTimeFormat);
            }
            else
            {
                return $"{dateTime.ToShortDateString()} {dateTime.ToShortTimeString()}";
            }
        }
        else
        {
            return graphDatetime;
        }
    }
}
